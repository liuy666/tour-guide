// let map_test = new AMap.Map('map_test', {
//     showBuildingBlock: true,
//     pitchEnable: false,
//     buildingAnimation: true,
//     rotateEnable: false,
//     touchZoomCenter: 1,
//     center: centerPoint,
//     zoom: 10,
//     zooms:[10,14],
//     layers: [
//         new AMap.TileLayer()
//     ]
// });

// 获取当前地图定位
/*var options = {
    'showButton': true,//是否显示定位按钮
    'buttonPosition': 'LB',//定位按钮的位置
    'buttonOffset': new AMap.Pixel(15, 23),//定位按钮距离对应角落的距离
    'showMarker': true,//是否显示定位点
    'markerOptions':{//自定义定位点样式，同Marker的Options
        'offset': new AMap.Pixel(-18, -36),
        'content':'<img src="https://a.amap.com/jsapi_demos/static/resource/img/user.png" style="width:36px;height:36px"/>'
    },
    'showCircle': true,//是否显示定位精度圈
    'circleOptions': {//定位精度圈的样式
        'strokeColor': '#0093FF',
        'noSelect': true,
        'strokeOpacity': 0.5,
        'strokeWeight': 1,
        'fillColor': '#02B0FF',
        'fillOpacity': 0.25
    },
    'panToLocation':false
}
AMap.plugin(["AMap.Geolocation"], function() {
    var geolocation = new AMap.Geolocation(options);
    _self.geolocation = geolocation;
    map_test.addControl(geolocation);
    geolocation.on('complete',function(GeolocationResult) {
        _self.isPositioning = false;
        let cp = GeolocationResult.position;
        if(cp.lat >= imgLeftBottom.lat && cp.lat <= imgRightTop.lat && cp.lng >= imgLeftBottom.lng && cp.lng <= imgRightTop.lng){
            _self.oMap_main.setView([cp.lat,cp.lng]);
            var myIcon = L.icon({
                iconUrl: './location.gif',
                className:'my-position'
            });
            L.marker([cp.lat,cp.lng],{icon:myIcon}).addTo(_self.oMap_main);
        }else{
            _self.tipsText3 = "您当前不在景区内";
            _self.isTips3 = true;
        }
    })
    geolocation.on('error',function(){
        _self.tipsText3 = "定位失败，请确保手机已开启定位";
        _self.isTips3 = true;
        _self.isPositioning = false;
    })
});*/

// 在leaflet中加载高德地图
// L.tileLayer.chinaProvider('GaoDe.Normal.Map', {
//     maxZoom: 19,
//     minZoom: 17
// }).addTo(oMap);




//h5的定位方式
 // 给地图添加定位失败和成功的回调处理
this.oMap_main.on('locationfound', function(e) {
    _self.isPositioning = false;
    
    //如果是扫描播放
    if(_self.$route.query && _self.$route.query.pid){
        return;
    }
    let radius = e.accuracy / 2,
        cp = e.latlng;

    if(cp.lat >= imgLeftBottom1[0] && cp.lat <= imgRightTop1[0] && cp.lng >= imgLeftBottom1[1] && cp.lng <= imgRightTop1[1]) {
        
        //设置定位点为地图显示中心点 并在地图上添加对应标记
        if(JSON.stringify(_self.locationPoint) != '{}'){
            _self.locationPoint.remove();
        }
        _self.oMap_main.setView([cp.lat,cp.lng]);
        let myIcon = L.divIcon({
            html: `<div class="icon"></div>`,
            className: 'my-position'
        });
        _self.locationPoint = L.marker([cp.lat,cp.lng],{icon:myIcon}).addTo(_self.oMap_main);

        //如果自动播放并且当时地图显示的是所有的景点
        if(_self.isAuto && _self.resourceType < 3){
            _self.markers.forEach((v,i) => {
                let latlng = L.latlng(v._latlng.lat,v._latlng.lng);
                if(cp.distanceTo(latlng) < 20){

                    const pointList = JSON.parse(sessionStorage.getItem("pointList"));
                    const point_dw = pointList.filter(item => item.resource_id === v._icon.children[0].dataset.id)[0];
                    let newPlayList = [];
                    
                    if(_self.scenicPointId != point_dw.resource_id){
                        //更新播放列表
                        //如果不存在路线 播放列表为完整景点中 包含当前定位点之后的景点们
                        //如果存在路线  1.当前定位点在路线中 播放列表为路线中包含当前定位点之后的景点们  
                        //             2.当前定位点不在路线中 播放列表为当前定位点+完整的路线景点
                        const currLineId = sessionStorage.getItem('lineId');
                        const lineList = JSON.parse(sessionStorage.getItem('lineList'));
                        let currentLineList =  lineList.filter(item => item.lineId === currLineId)[0].lineDetailList;
                        let pidList = currentLineList.map(item => item.resourceId);

                        if(!currLineId){//不存在路线
                            const index_dw = pointList.findIndex(item => item.resource_id === v._icon.children[0].dataset.id);
                            newPlayList = pointList.slice(index_dw).map(item => {
                                return {
                                    aSrc : item.guideUrl,
                                    aId : item.resource_id
                                }
                            })
                        }else if(_self.$tool.isExist(point_dw.resource_id, pidList)){//存在路线 且当前定位点在路线中
                            const index_dw_line = pidList.findIndex(item => item === point_dw.resource_id);
                            newPlayList = currentLineList.slice(index_dw_line).map(item => {
                                return {
                                    aSrc : item.guideUrl,
                                    aId : item.resourceId
                                }
                            })
                        }else{
                            let linePlayList = currentLineList.map(item => {
                                return {
                                    aSrc : item.guideUrl,
                                    aId : item.resourceId
                                }
                            })
                            newPlayList = [{aSrc : point_dw.guideUrl,aId : point_dw.resource_id}].concat(linePlayList);
                        }
                        sessionStorage.setItem("playList",JSON.stringify(newPlayList));

                        //如果景区音频正在播放 暂停掉
                        let detailAudio = document.querySelector(".detail-Audio");
                        if(detailAudio && !detailAudio.paused) {
                            _self.pauseAudio_scenic();
                        }
                        
                        _self.scenicPointImg = point_dw.url;
                        _self.scenicPointName = point_dw.name;
                        _self.scenicPointId = point_dw.resource_id;
                        sessionStorage.setItem("currentPoint",JSON.stringify(point_dw));
                        sessionStorage.setItem("mapClickPointId",point_dw.resource_id);

                            //播放当前定位点的音频
                        _self.playAudio({
                            type : 2,
                            _src : point_dw.guideUrl,
                            _id : point_dw.resource_id
                        })
                    }
                }
            })
        }
    }else{
        _self.count += 1;
        if(_self.count <= 1){
            _self.tipsText3 = "您当前不在景区内";
            _self.isTips3 = true;
            _self.oMap_main.stopLocate();
        }
    }
});
this.oMap_main.on('locationerror', function(e) {
    _self.count += 1;
    if(_self.count <= 1){
        _self.tipsText3 = "定位失败，请确保手机已开启定位";
        _self.isTips3 = true;
        _self.isPositioning = false;
        _self.oMap_main.stopLocate();
    }
});